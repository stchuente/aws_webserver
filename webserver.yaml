AWSTemplateFormatVersion: 2010-09-09
Description: 'Cloud Formation Template for WebServer'
Parameters:
  VpcCidr:
     Description: Please enter VPC CIDR
     Type: String
     Default: 10.0.0.0/16
  InstanceType:
       Description: WebServer instance type
       Type: String
       Default: t3.micro

Resources:
    ExampleVpc:
      Type: 'AWS::EC2::VPC'
      Properties:
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'
        CidrBlock: !Ref VpcCidr
        Tags:
          - Key: Name
            Value: example-vpc
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
          - Key: Name
            Value: IGW
    GatewayToInternet:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref ExampleVpc
        InternetGatewayId: !Ref InternetGateway
    PublicSubnet1:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref ExampleVpc
        MapPublicIpOnLaunch: 'true'
        AvailabilityZone: !Select 
            - 0
            - !GetAZs ''
        CidrBlock: !Select [ 0, !Cidr [ !GetAtt ExampleVpc.CidrBlock, 4, 8 ]]
        Tags:
           - Key: Name
             Value: Public-Subnet1
    PrivateSubnet1:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref ExampleVpc
        AvailabilityZone: !Select 
          - 0
          - !GetAZs ''
        CidrBlock: !Select [ 2, !Cidr [ !GetAtt ExampleVpc.CidrBlock, 4, 8 ]]
        Tags:
          - Key: Name
            Value: Private-Subnet1
    PublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref ExampleVpc
        MapPublicIpOnLaunch: 'true' 
        AvailabilityZone: !Select 
            - 1
            - !GetAZs ''
        CidrBlock: !Select [ 1, !Cidr [ !GetAtt ExampleVpc.CidrBlock, 4, 8 ]]
        Tags:
          - Key: Name
            Value: Public-Subnet2
    PrivateSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref ExampleVpc
        AvailabilityZone: !Select 
          - 1
          - !GetAZs ''
        CidrBlock: !Select [ 3, !Cidr [ !GetAtt ExampleVpc.CidrBlock, 4, 8 ]]
        Tags:
          - Key: Name
            Value: Private-Subnet2
    NAT:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 
          - EIP
          - AllocationId
        SubnetId: !Ref PublicSubnet1
    NATGatewayRoute:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NAT
    EIP:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    PublicRoute:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref ExampleVpc
        Tags:
          - Key: Name
            Value: 'Public-RT'
    PrivateRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref ExampleVpc
        Tags:
          - Key: Name
            Value: 'Private-RT'
    PublicSubnetRouteTableAssociation1:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetRouteTableAssociation2:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable
    PrivateSubnetRouteTableAssociation1:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable
    PrivateSubnetRouteTableAssociation2:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable
    WebServerASG:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
          DesiredCapacity: '2'
          MaxSize: '4'
          MinSize: '2'
          VPCZoneIdentifier:
                  - !Ref PrivateSubnet1
                  - !Ref PrivateSubnet2
          LaunchConfigurationName: !Ref WebServerLC
          TargetGroupARNs:
            - !Ref ALBTargetGroup
          Tags:
          - Key: Name
            Value: 'WebServer'
            PropagateAtLaunch: "true"
    WebServerLC:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Properties:
          InstanceType: !Ref InstanceType
          SecurityGroups:
           - !Ref WebServerSG
          ImageId:  ami-00dfe2c7ce89a450b
          IamInstanceProfile: !Ref InstanceProfRole
          UserData: !Base64
           'Fn::Sub': |
              #!/bin/bash -xe
              # 1) Install App (Amazon Linux 2 specific)
              yum update -y
              yum install -y httpd php
              yum install -y aws-cli
              yum install -y zip
              cd /var/www/html/
              cat << 'EOF' > /var/www/html/index.php
              <!DOCTYPE html>
              <html>
              <body>
                <center>
                  <?php
                $url = "http://169.254.169.254/latest/meta-data/hostname";
                $hostanme = file_get_contents($url);
                ?>
                <h2>Hello World at: <?php echo $hostanme ?></h2>
              </center>
              </body>
              </html>
              EOF
              service httpd start
    WebServerSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
          GroupDescription: Enable SSH and HTTP access
          VpcId: !Ref ExampleVpc
          SecurityGroupIngress:
             - IpProtocol: tcp
               FromPort: '80'
               ToPort: '80'
               CidrIp: !Ref VpcCidr
               Description: 'HTTP access'
             - IpProtocol: tcp
               FromPort: '443'
               ToPort: '443'
               CidrIp: !Ref VpcCidr
               Description: 'HTTPS access'
             - IpProtocol: tcp
               FromPort: '22'
               ToPort: '22'
               CidrIp: !Ref VpcCidr
               Description: 'SSH access'
          SecurityGroupEgress:
             - IpProtocol: -1
               CidrIp: 0.0.0.0/0
    ALBSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
          GroupDescription: Enable web access
          VpcId: !Ref ExampleVpc
          SecurityGroupIngress:
             - IpProtocol: -1
               CidrIp: 0.0.0.0/0
    ApplicationLoadBalancer:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
          Subnets:
                  - !Ref PublicSubnet1
                  - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ALBSG
    ALBListener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
          DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref ALBTargetGroup
          LoadBalancerArn: !Ref ApplicationLoadBalancer
          Port: '80'
          Protocol: HTTP
    ALBTargetGroup:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
          HealthCheckPath: '/'
          HealthCheckIntervalSeconds: 30
          HealthCheckTimeoutSeconds: 5
          HealthyThresholdCount: 3
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: !Ref ExampleVpc

    InstanceProfRole:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
          Path: /
          Roles:
           - !Ref WebServerRole
    WebServerRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: EC2-WebServer-Role
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: EC2-WebServer-Policy
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "s3:*"
                            ],
                            "Resource": "*"
                        }]
                    }
    EC2ScaleIn:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref WebServerASG
        Cooldown: "300"
        ScalingAdjustment: -1

    EC2ScaleOut:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
          AdjustmentType: ChangeInCapacity
          AutoScalingGroupName: !Ref WebServerASG
          Cooldown: "300"
          ScalingAdjustment: 1

    ScaleInAlarm: 
      Properties: 
        ActionsEnabled: true
        AlarmActions: 
          - 
            Ref: EC2ScaleIn
        ComparisonOperator: LessThanOrEqualToThreshold
        Dimensions: 
          - 
           Name: AutoScalingGroupName
           Value: 
              Ref: WebServerASG
        EvaluationPeriods: 2
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Period: 300
        Statistic: Average
        Threshold: 70
        TreatMissingData: notBreaching
        Unit: Percent
      Type: "AWS::CloudWatch::Alarm"
    ScaleOutAlarm: 
      Properties: 
        ActionsEnabled: true
        AlarmActions: 
          - 
            Ref: EC2ScaleOut
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions: 
          - 
            Name: AutoScalingGroupName
            Value: 
              Ref: WebServerASG
        EvaluationPeriods: 2
        MetricName: CPUUtilization
        Namespace: AWS/EC2
        Period: 300
        Statistic: Average
        Threshold: 90
        TreatMissingData: notBreaching
        Unit: Percent
      Type: "AWS::CloudWatch::Alarm"
Outputs:
  WebsiteURL:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Application URL



